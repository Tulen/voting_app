
Redux & Application State 

  All application state stored in one single tree structure.
    Allows one to think about state in isolation from behavior.
  Helpful to have idea of state tree prior to implementation

Redux & Immutablity

  Redux state tree is immutable data structure.
  You get to a new state by applying a function that takes current state and returns new one.
  Why is this good?
    Collection of previous state trees preserved. Free undos/redos, history serialization etc.
    Simplifies code: pure functions that take data, return data and do nothing else are predictable.

  While immutable data key part of Redux architecture, no hard requirement to use immutable library
    Immutable.js provides api for convenient immutable operations
    No such thing as immutability by convention. Mistakes will be made.
    Immutable data structures persistent(preserves previous version of self when modified).
      Structured for time and memory efficicency, even for large state trees.
    Using POJO's and arrays may lead to excessive copying, hurting performance.

Application Logic & Pure Functions

Introducting Actions & Reducers

  Actions are a simple data structure that describe changes that should occur in app state.
  Reducers are functions that take an action and current state, invoking core function that matches action.
  If reducer doesn't recognize action, just return current state.
  If called with undefined state, reducer should know how to initialize a meaningful value.
  Given a collection of past actions, you can "reduce" that collection into current state. Hence the name.
  Ability to batch/replay collections a major benefit of action/reducer state transition model vs. calling core functions directly.
  Note use of POJO's as actions vs. immutable data structures. Redux requirement.

Reducer Composition

  Modularization: have functionality that deals with a given part of data deal with only that part, as if the rest doesn't exist.
  Make operations work on smallest piece/subtree of state possible.
  Main reducer hands parts of state to lower-level (separate finding right location on state tree to applying update)

Redux Store 

  Holds current state, over times can receive actions that evolve state from one version to next, using 
  core application logic written and exposed through reducer.

  Current state tree only thing that varies over time in applation, rest are constants and immutable values.


